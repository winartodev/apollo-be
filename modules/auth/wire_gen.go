// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package auth

import (
	"github.com/winartodev/apollo-be/core/helper"
	"github.com/winartodev/apollo-be/modules/auth/delivery/http"
	"github.com/winartodev/apollo-be/modules/auth/domain/service"
	"github.com/winartodev/apollo-be/modules/auth/repository"
	usecase2 "github.com/winartodev/apollo-be/modules/auth/usecase"
	service2 "github.com/winartodev/apollo-be/modules/user/domain/service"
	repository2 "github.com/winartodev/apollo-be/modules/user/repository"
	"github.com/winartodev/apollo-be/modules/user/usecase"
)

// Injectors from wire.go:

func InitializeAuthAPI(database *helper.DatabaseUtil, redis *helper.RedisUtil, jwt *helper.JWT, smtp *helper.SmtpConfig, otp *helper.OtpConfig) (*http.AuthHandler, error) {
	authRepository, err := repository.NewAuthRepository(database)
	if err != nil {
		return nil, err
	}
	authService, err := service.NewAuthService(authRepository)
	if err != nil {
		return nil, err
	}
	otpRepository, err := repository.NewOtpRepository(redis)
	if err != nil {
		return nil, err
	}
	otpService, err := service.NewOtpService(otpRepository)
	if err != nil {
		return nil, err
	}
	userRepository, err := repository2.NewUserRepository(database)
	if err != nil {
		return nil, err
	}
	userService, err := service2.NewUserService(userRepository)
	if err != nil {
		return nil, err
	}
	userUseCase, err := usecase.NewUserUseCase(userService)
	if err != nil {
		return nil, err
	}
	otpUseCase := usecase2.NewOtpUseCase(otpService, userUseCase, jwt, smtp, otp)
	authUseCase, err := usecase2.NewAuthUseCase(authService, otpUseCase, jwt, userUseCase)
	if err != nil {
		return nil, err
	}
	authHandler := http.NewAuthHandler(authUseCase)
	return authHandler, nil
}

func InitializeOtpAPI(database *helper.DatabaseUtil, redis *helper.RedisUtil, jwt *helper.JWT, smtp *helper.SmtpConfig, otp *helper.OtpConfig) (*http.OtpHandler, error) {
	otpRepository, err := repository.NewOtpRepository(redis)
	if err != nil {
		return nil, err
	}
	otpService, err := service.NewOtpService(otpRepository)
	if err != nil {
		return nil, err
	}
	userRepository, err := repository2.NewUserRepository(database)
	if err != nil {
		return nil, err
	}
	userService, err := service2.NewUserService(userRepository)
	if err != nil {
		return nil, err
	}
	userUseCase, err := usecase.NewUserUseCase(userService)
	if err != nil {
		return nil, err
	}
	otpUseCase := usecase2.NewOtpUseCase(otpService, userUseCase, jwt, smtp, otp)
	otpHandler := http.NewOtpHandler(otpUseCase)
	return otpHandler, nil
}
