// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package auth

import (
	"database/sql"

	"github.com/redis/go-redis/v9"
	"github.com/winartodev/apollo-be/config"
	"github.com/winartodev/apollo-be/infrastructure/auth"
	"github.com/winartodev/apollo-be/infrastructure/database"
	"github.com/winartodev/apollo-be/infrastructure/middleware"
	redis2 "github.com/winartodev/apollo-be/infrastructure/redis"
	"github.com/winartodev/apollo-be/infrastructure/smtp"
	"github.com/winartodev/apollo-be/modules/auth/delivery/http"
	"github.com/winartodev/apollo-be/modules/auth/domain/service"
	"github.com/winartodev/apollo-be/modules/auth/repository"
	usecase2 "github.com/winartodev/apollo-be/modules/auth/usecase"
	service2 "github.com/winartodev/apollo-be/modules/user/domain/service"
	repository2 "github.com/winartodev/apollo-be/modules/user/repository"
	"github.com/winartodev/apollo-be/modules/user/usecase"
)

// Injectors from wire.go:

func InitializeAuthAPI(db *sql.DB, redis3 *redis.Client, smtpConfig *config.SMTPConfig, otp *config.Otp) (*http.AuthHandler, error) {
	databaseDatabase, err := database.NewDatabase(db)
	if err != nil {
		return nil, err
	}
	authRepository, err := repository.NewAuthRepository(databaseDatabase)
	if err != nil {
		return nil, err
	}
	passwordService := auth.NewBcryptPasswordService()
	authService, err := service.NewAuthService(authRepository, passwordService)
	if err != nil {
		return nil, err
	}
	redisRedis, err := redis2.NewRedis(redis3)
	if err != nil {
		return nil, err
	}
	otpRepository, err := repository.NewOtpRepository(redisRedis)
	if err != nil {
		return nil, err
	}
	otpService, err := service.NewOtpService(otpRepository)
	if err != nil {
		return nil, err
	}
	userRepository, err := repository2.NewUserRepository(databaseDatabase)
	if err != nil {
		return nil, err
	}
	userService, err := service2.NewUserService(userRepository)
	if err != nil {
		return nil, err
	}
	userUseCase, err := usecase.NewUserUseCase(userService)
	if err != nil {
		return nil, err
	}
	smtpService := smtp.NewSMTPService(smtpConfig)
	otpUseCase := usecase2.NewOtpUseCase(otpService, userUseCase, smtpService, otp)
	jwt, err := auth.NewJWT()
	if err != nil {
		return nil, err
	}
	tokenService := auth.NewJwtTokenService(jwt)
	authUseCase, err := usecase2.NewAuthUseCase(authService, otpUseCase, tokenService, userUseCase)
	if err != nil {
		return nil, err
	}
	middlewareMiddleware := middleware.NewMiddleware(tokenService)
	authHandler := http.NewAuthHandler(authUseCase, middlewareMiddleware)
	return authHandler, nil
}

func InitializeOtpAPI(db *sql.DB, redis3 *redis.Client, smtpConfig *config.SMTPConfig, otp *config.Otp) (*http.OtpHandler, error) {
	redisRedis, err := redis2.NewRedis(redis3)
	if err != nil {
		return nil, err
	}
	otpRepository, err := repository.NewOtpRepository(redisRedis)
	if err != nil {
		return nil, err
	}
	otpService, err := service.NewOtpService(otpRepository)
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.NewDatabase(db)
	if err != nil {
		return nil, err
	}
	userRepository, err := repository2.NewUserRepository(databaseDatabase)
	if err != nil {
		return nil, err
	}
	userService, err := service2.NewUserService(userRepository)
	if err != nil {
		return nil, err
	}
	userUseCase, err := usecase.NewUserUseCase(userService)
	if err != nil {
		return nil, err
	}
	smtpService := smtp.NewSMTPService(smtpConfig)
	otpUseCase := usecase2.NewOtpUseCase(otpService, userUseCase, smtpService, otp)
	jwt, err := auth.NewJWT()
	if err != nil {
		return nil, err
	}
	tokenService := auth.NewJwtTokenService(jwt)
	middlewareMiddleware := middleware.NewMiddleware(tokenService)
	otpHandler := http.NewOtpHandler(otpUseCase, middlewareMiddleware)
	return otpHandler, nil
}
