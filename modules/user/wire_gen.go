// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"database/sql"
	"github.com/winartodev/apollo-be/infrastructure/auth"
	"github.com/winartodev/apollo-be/infrastructure/database"
	"github.com/winartodev/apollo-be/infrastructure/middleware"
	"github.com/winartodev/apollo-be/modules/user/delivery/http"
	"github.com/winartodev/apollo-be/modules/user/domain/service"
	"github.com/winartodev/apollo-be/modules/user/repository"
	"github.com/winartodev/apollo-be/modules/user/usecase"
)

// Injectors from wire.go:

func InitializeUserAPI(db *sql.DB) (*http.UserHandler, error) {
	databaseDatabase, err := database.NewDatabase(db)
	if err != nil {
		return nil, err
	}
	userRepository, err := repository.NewUserRepository(databaseDatabase)
	if err != nil {
		return nil, err
	}
	userService, err := service.NewUserService(userRepository)
	if err != nil {
		return nil, err
	}
	userUseCase, err := usecase.NewUserUseCase(userService)
	if err != nil {
		return nil, err
	}
	jwt, err := auth.NewJWT()
	if err != nil {
		return nil, err
	}
	tokenService := auth.NewJwtTokenService(jwt)
	middlewareMiddleware := middleware.NewMiddleware(tokenService)
	userHandler := http.NewUserHandler(userUseCase, middlewareMiddleware)
	return userHandler, nil
}
