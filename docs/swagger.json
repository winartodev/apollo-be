{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the Apollo server.",
        "title": "Apollo API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8081",
    "basePath": "/api",
    "paths": {
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh authentication tokens",
                "responses": {
                    "200": {
                        "description": "Tokens refreshed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/request-reset": {
            "post": {
                "description": "Send OTP to user's email for password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request to reset password",
                "parameters": [
                    {
                        "description": "Password Reset Request Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RequestResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response containing OTP info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.RequestResetResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "Reset the user's password using email and new password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset Password Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "Sign in user with username/email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid username or password",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-out": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sign out user and invalidate authentication tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "User signed out successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "Create a new user account with provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "description": "Verifies if a username is available (i.e., does not already exist in the system).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Check username availability",
                "parameters": [
                    {
                        "description": "Verify User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username is available",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.VerifyUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Username already exists",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/otp/resend": {
            "post": {
                "description": "Resend one-time password to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OTP"
                ],
                "summary": "Resend OTP",
                "parameters": [
                    {
                        "description": "OTP resend request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OtpResendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP resent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.OtpResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many requests - rate limited",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/otp/validate": {
            "post": {
                "description": "Validate one-time password provided by the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OTP"
                ],
                "summary": "Validate OTP",
                "parameters": [
                    {
                        "description": "OTP validation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP validated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.OtpValidationResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Invalid OTP",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "429": {
                        "description": "Too many attempts",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT access token\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                },
                "otp": {
                    "description": "OTP information (if applicable)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.OtpResponse"
                        }
                    ]
                },
                "redirection_link": {
                    "description": "Redirection link after authentication\nexample: /dashboard",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "Refresh token for obtaining new access tokens\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        },
        "dto.OtpRequest": {
            "type": "object",
            "required": [
                "email",
                "otp",
                "type"
            ],
            "properties": {
                "email": {
                    "description": "Email user email address\nrequired: true\nexample: user@example.com",
                    "type": "string"
                },
                "otp": {
                    "description": "OTP Number (6 digits)\nrequired: true\nminimum: 100000\nmaximum: 999999\nexample: 123456",
                    "type": "integer",
                    "maximum": 999999,
                    "minimum": 0
                },
                "type": {
                    "description": "Type of OTP request, e.g. signup, reset_password\nrequired: true\nenum: signup,request_reset\nexample: request_reset",
                    "type": "string",
                    "enum": [
                        "signup",
                        "request_reset"
                    ]
                }
            }
        },
        "dto.OtpResendRequest": {
            "type": "object",
            "required": [
                "email",
                "type"
            ],
            "properties": {
                "email": {
                    "description": "Email email address\nrequired: true\nexample: user@example.com",
                    "type": "string"
                },
                "type": {
                    "description": "Type of OTP request, e.g. signup, reset_password, login\nrequired: true\nenum: signup,reset_password,login\nexample: reset_password",
                    "type": "string",
                    "enum": [
                        "signup",
                        "request_reset"
                    ]
                }
            }
        },
        "dto.OtpResponse": {
            "type": "object",
            "properties": {
                "expires_in": {
                    "description": "Time in seconds until the OTP expires\nexample: 300",
                    "type": "integer"
                },
                "is_valid": {
                    "description": "Indicates if the OTP is valid\nexample: true",
                    "type": "boolean"
                },
                "retry_after_seconds": {
                    "description": "Time in seconds to wait before retrying (optional)\nexample: 60",
                    "type": "integer"
                },
                "retry_attempts_left": {
                    "description": "Number of retry attempts remaining\nexample: 3",
                    "type": "integer"
                }
            }
        },
        "dto.OtpValidationResponse": {
            "type": "object",
            "properties": {
                "is_valid": {
                    "description": "Indicates if the OTP validation was successful\nexample: true",
                    "type": "boolean"
                },
                "message": {
                    "description": "Message describing the validation result\nexample: OTP validated successfully",
                    "type": "string"
                },
                "redirection_link": {
                    "description": "Redirection link after successful validation\nexample: https://example.com/dashboard",
                    "type": "string"
                }
            }
        },
        "dto.RequestResetRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.RequestResetResponse": {
            "type": "object",
            "properties": {
                "otp": {
                    "description": "OTP information (if applicable)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.OtpResponse"
                        }
                    ]
                },
                "redirection_link": {
                    "description": "Redirection link after authentication\nexample: /dashboard",
                    "type": "string"
                }
            }
        },
        "dto.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "password_confirmation"
            ],
            "properties": {
                "email": {
                    "description": "Email of the user requesting the password reset.\nrequired: true\nformat: email",
                    "type": "string"
                },
                "password": {
                    "description": "Password is the new password the user wants to set.\nrequired: true\nmin length: 0\nmax length: 8",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 0
                },
                "password_confirmation": {
                    "description": "PasswordConfirmation must match the password field.\nrequired: true\nmin length: 0\nmax length: 8",
                    "type": "string",
                    "maxLength": 8,
                    "minLength": 0
                }
            }
        },
        "dto.SignInRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password (required)\nrequired: true\nmin length: 6\nmax length: 100\nexample: secretPassword123",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 6
                },
                "username": {
                    "description": "Username or email address (required)\nrequired: true\nmin length: 3\nmax length: 50\nexample: john.doe@example.com",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                }
            }
        },
        "dto.SignUpRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email address (required)\nrequired: true\nformat: email\nexample: john.doe@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "Password (required)\nrequired: true\nmin length: 8\nmax length: 100\nexample: SecurePass123!",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Phone number (optional)\npattern: ^\\+?[1-9]\\d{1,14}$\nexample: +1234567890",
                    "type": "string"
                },
                "username": {
                    "description": "Username (required)\nrequired: true\nmin length: 3\nmax length: 30\npattern: ^[a-zA-Z0-9_]+$\nexample: JohnDoe",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                }
            }
        },
        "dto.VerifyUserRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyUserResponse": {
            "type": "object",
            "properties": {
                "suggestions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_exists": {
                    "type": "boolean"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "General error message when no field-specific errors exist\nExample: \"Invalid credentials\""
                },
                "message": {
                    "description": "Optional message describing the result",
                    "type": "string"
                },
                "success": {
                    "description": "Indicates if the request was successful",
                    "type": "boolean"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "The main data payload"
                },
                "message": {
                    "description": "Optional message describing the result",
                    "type": "string"
                },
                "meta": {
                    "description": "Additional metadata about the response"
                },
                "success": {
                    "description": "Indicates if the request was successful",
                    "type": "boolean"
                }
            }
        }
    },
    "security": [
        {
            "Definitions.apikey BearerAuth": []
        }
    ]
}